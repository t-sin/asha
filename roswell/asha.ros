#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:asha :uiop :string-case) :silent t)
  )

(defpackage :ros.script.asha.3833762159
  (:use :cl
        :string-case))
(in-package :ros.script.asha.3833762159)

(defun print-help ()
  (format t "
Asha - Static site generator management command

asha COMMAND [OPTION...]

COMMAND:
    init PATH                                    Initialize website with PATH.
    publish PATH                                 Generate output HTML files into PATH.
    add TYPE [ARG...]                            Add document as TYPE.
        template NAME PATH                       Add a template file.
        content PATH TEMPLATE                    Add a content file using TEMPLATE as template.
        article-set DIR NAME TAGTMP TOPTMP ATMP  Add an article set with NAME. TAGTMP for tags,
                                                 TOPTMP for index and ATMP for each articles.
        article
    help                                           Print this usege.
"))

(defun init-website (&rest argv)
  (let ((dir (first argv)))
    (unless dir
      (format t "ERROR: specify directory.~%")
      (return-from init-website))
    (let ((asha-dir (merge-pathnames ".asha/"
                                     (uiop:ensure-directory-pathname dir))))
      (ensure-directories-exist asha-dir)
      (let ((website (asha:create-website dir)))
        (asha:save-website website)))))

(defun publish-website (cwd &rest argv)
  (let ((website (asha:load-website cwd))
        (outdir (uiop:ensure-directory-pathname (first argv))))
    (ensure-directories-exist outdir)
    (asha:publish-website website outdir)))

(defun remove-dot-slash (path)
  (if (alexandria:starts-with-subseq "./" path)
      (subseq path 2)
      path))

(defun add-template-to-website (website &rest argv)
  (let* ((name (first argv))
         (path (remove-dot-slash (second argv))))
    (asha:add-template name path website)))

(defun add-content-to-website (website &rest argv)
  (let* ((path (remove-dot-slash (first argv)))
         (template-name (second argv)))
    (asha:add-content path template-name website)))

(defun add-article-set-to-website (website &rest argv)
  (let* ((article-set-dir (uiop:ensure-directory-pathname (first argv)))
         (article-set-name (car (last (pathname-directory article-set-dir))))
         (name (second argv))
         (tag-template (third argv))
         (index-template (fourth argv))
         (article-template (fifth argv)))
    (asha:add-article-set article-set-name name website
                               :content-template article-template
                               :index-template index-template
                               :tag-template tag-template)))

(defun add-something-to-website (cwd &rest argv)
  (unless (uiop:directory-exists-p (merge-pathnames ".asha/" cwd))
    (format t "")
    (return-from add-something-to-website))
  (let ((subcommand (first argv))
        (website (asha:load-website cwd)))
    (when (null subcommand)
      (format t "ERROR: specify TYPE.~%")
      (print-help))
    (unwind-protect
         (string-case (subcommand)
                      ("template" (apply #'add-template-to-website website (rest argv)))
                      ("content" (apply #'add-content-to-website website (rest argv)))
                      ("article-set" (apply #'add-article-set-to-website website (rest argv)))
                      ;; ("article" (asha::add-article )))))
                      (t (format t "unknown type ~s with args ~s~%" subcommand (rest argv))))
      (asha:save-website website))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((subcommand (first argv))
         (cwd (uiop:getcwd)))
    (when (null subcommand)
      (format t "ERROR: specify COMMAND.~%")
      (print-help)
      (return-from main))
    (string-case (subcommand)
      ("init" (apply #'init-website (rest argv)))
      ("publish" (apply #'publish-website cwd (rest argv)))
      ("add" (apply #'add-something-to-website cwd (rest argv)))
      ("help" (print-help))
      (t (format t "ERROR: unknown command ~s with args ~s~%" subcommand (rest argv))))))
;;; vim: set ft=lisp lisp:
